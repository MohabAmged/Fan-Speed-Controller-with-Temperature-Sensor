
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002126  0000219a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d34  00000000  00000000  000022c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c3  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000050b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00005277  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  0000548b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  00007a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  00008f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000a278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000a458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000a75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b179  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <main>
      7a:	0c 94 91 10 	jmp	0x2122	; 0x2122 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e7       	ldi	r26, 0x7E	; 126
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e7       	ldi	r24, 0x7E	; 126
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e7       	ldi	r22, 0x7E	; 126
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 25 10 	jmp	0x204a	; 0x204a <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	ea 57       	subi	r30, 0x7A	; 122
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <ADC_init>:
*
**************************************************************************************************************************************/

/* ADC Init Function */
  void ADC_init(const ADC_ConfigType * Config_Ptr)
 {
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <ADC_init+0x6>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	 /*   Setting The Ref Selection Bits    */
        ADMUX=(ADMUX&0x3F)|(Config_Ptr->ref_volt);
     ee8:	a7 e2       	ldi	r26, 0x27	; 39
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e7 e2       	ldi	r30, 0x27	; 39
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	98 2f       	mov	r25, r24
     ef4:	9f 73       	andi	r25, 0x3F	; 63
     ef6:	e9 81       	ldd	r30, Y+1	; 0x01
     ef8:	fa 81       	ldd	r31, Y+2	; 0x02
     efa:	80 81       	ld	r24, Z
     efc:	89 2b       	or	r24, r25
     efe:	8c 93       	st	X, r24

     /* Setting ADLR =0 */
        CLEAR_BIT(ADMUX,ADLAR);
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 7d       	andi	r24, 0xDF	; 223
     f0c:	8c 93       	st	X, r24

        /*  Enable ADC */
        SET_BIT(ADCSRA,ADEN);
     f0e:	a6 e2       	ldi	r26, 0x26	; 38
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e6 e2       	ldi	r30, 0x26	; 38
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	8c 93       	st	X, r24

     /* Setting Prescaler       */
      ADCSRA=(ADCSRA&0xF8)|(Config_Ptr->prescaler);
     f1c:	a6 e2       	ldi	r26, 0x26	; 38
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	98 2f       	mov	r25, r24
     f28:	98 7f       	andi	r25, 0xF8	; 248
     f2a:	e9 81       	ldd	r30, Y+1	; 0x01
     f2c:	fa 81       	ldd	r31, Y+2	; 0x02
     f2e:	81 81       	ldd	r24, Z+1	; 0x01
     f30:	89 2b       	or	r24, r25
     f32:	8c 93       	st	X, r24



 }
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <ADC_ReadChannel>:


 /* ADC Read Channel Function */
  uint16 ADC_ReadChannel(ADC_Channel Channel)
  {
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	0f 92       	push	r0
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	89 83       	std	Y+1, r24	; 0x01
 	 /*   Setting The Channel Selection Bits    */
         ADMUX=(ADMUX&0xE0)|(Channel&0x1F);
     f4a:	a7 e2       	ldi	r26, 0x27	; 39
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e7 e2       	ldi	r30, 0x27	; 39
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	98 2f       	mov	r25, r24
     f56:	90 7e       	andi	r25, 0xE0	; 224
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8f 71       	andi	r24, 0x1F	; 31
     f5c:	89 2b       	or	r24, r25
     f5e:	8c 93       	st	X, r24

      /* Start Conversation */
         SET_BIT(ADCSRA,ADSC);
     f60:	a6 e2       	ldi	r26, 0x26	; 38
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e6 e2       	ldi	r30, 0x26	; 38
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	8c 93       	st	X, r24

       /* Wait Till Flag Raise */
      while(!GET_BIT(ADCSRA,ADIF));
     f6e:	e6 e2       	ldi	r30, 0x26	; 38
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	80 71       	andi	r24, 0x10	; 16
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	95 95       	asr	r25
     f7e:	87 95       	ror	r24
     f80:	95 95       	asr	r25
     f82:	87 95       	ror	r24
     f84:	95 95       	asr	r25
     f86:	87 95       	ror	r24
     f88:	95 95       	asr	r25
     f8a:	87 95       	ror	r24
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	79 f3       	breq	.-34     	; 0xf6e <ADC_ReadChannel+0x30>
      /* Clear Flag */
      SET_BIT(ADCSRA,ADIF);
     f90:	a6 e2       	ldi	r26, 0x26	; 38
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e6 e2       	ldi	r30, 0x26	; 38
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	8c 93       	st	X, r24

      /* Get Data From ADC Register */

      return ADC;
     f9e:	e4 e2       	ldi	r30, 0x24	; 36
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01

  }
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DcMotor_Init>:
*                                                Functions Definition
*
**************************************************************************************************************************************/

void DcMotor_Init(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62

	 /* Setting Pins Direction */
		 GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN1, POUTPUT);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	0e 94 20 08 	call	0x1040	; 0x1040 <GPIO_setupPinDirection>
		 GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN2, POUTPUT);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	0e 94 20 08 	call	0x1040	; 0x1040 <GPIO_setupPinDirection>



}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <DcMotor_Rotate>:
 /* Set Direction And Speed */
 void DcMotor_Rotate(DcMotor_State State , uint8 speed )
 {
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DcMotor_Rotate+0x6>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6a 83       	std	Y+2, r22	; 0x02



 	if(State==ClockWise)
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	59 f4       	brne	.+22     	; 0xffa <DcMotor_Rotate+0x2a>
 	{
 		// To Rotate The Motor ACW
 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,PHIGH);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,PLOW);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
     ff8:	1b c0       	rjmp	.+54     	; 0x1030 <DcMotor_Rotate+0x60>


 	}
 	else if(State==AntiClockWise)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	59 f4       	brne	.+22     	; 0x1016 <DcMotor_Rotate+0x46>
 	{
 		// To Rotate The Motor ACW
 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,PLOW);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,PHIGH);
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	41 e0       	ldi	r20, 0x01	; 1
    1010:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <DcMotor_Rotate+0x60>
 	}
 	else if(State==Stop)
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	88 23       	and	r24, r24
    101a:	51 f4       	brne	.+20     	; 0x1030 <DcMotor_Rotate+0x60>
 	{
 		                // To Rotate The Motor ACW
 		 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,PLOW);
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
 		 		 		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,PLOW);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>

 	}

    /* Adjusting Motor Speed */
 	PWM_Timer0_Start(speed);
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <PWM_Timer0_Start>





}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <GPIO_setupPinDirection>:
#include "GPIO_Types.h"
#include <avr/io.h>

/* Set Pin Direction Func */
void GPIO_setupPinDirection(PortIdType PORT , uint8 PinNo,PinDirectionType Dir)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <GPIO_setupPinDirection+0x6>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <GPIO_setupPinDirection+0x8>
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	6a 83       	std	Y+2, r22	; 0x02
    1052:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORT)
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3d 83       	std	Y+5, r19	; 0x05
    105c:	2c 83       	std	Y+4, r18	; 0x04
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <GPIO_setupPinDirection+0x2a>
    1068:	47 c0       	rjmp	.+142    	; 0x10f8 <GPIO_setupPinDirection+0xb8>
    106a:	2c 81       	ldd	r18, Y+4	; 0x04
    106c:	3d 81       	ldd	r19, Y+5	; 0x05
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	2c f4       	brge	.+10     	; 0x107e <GPIO_setupPinDirection+0x3e>
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	71 f0       	breq	.+28     	; 0x1098 <GPIO_setupPinDirection+0x58>
    107c:	cb c0       	rjmp	.+406    	; 0x1214 <GPIO_setupPinDirection+0x1d4>
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <GPIO_setupPinDirection+0x4a>
    1088:	67 c0       	rjmp	.+206    	; 0x1158 <GPIO_setupPinDirection+0x118>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <GPIO_setupPinDirection+0x56>
    1094:	91 c0       	rjmp	.+290    	; 0x11b8 <GPIO_setupPinDirection+0x178>
    1096:	be c0       	rjmp	.+380    	; 0x1214 <GPIO_setupPinDirection+0x1d4>
	{

	case PORTIDA:
               if(Dir==PINPUT)
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 23       	and	r24, r24
    109c:	a9 f4       	brne	.+42     	; 0x10c8 <GPIO_setupPinDirection+0x88>
                   {

            	   CLEAR_BIT(DDRA,PinNo);
    109e:	aa e3       	ldi	r26, 0x3A	; 58
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ea e3       	ldi	r30, 0x3A	; 58
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <GPIO_setupPinDirection+0x7c>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <GPIO_setupPinDirection+0x78>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	a6 c0       	rjmp	.+332    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <GPIO_setupPinDirection+0x90>
    10ce:	a2 c0       	rjmp	.+324    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRA,PinNo);
    10d0:	aa e3       	ldi	r26, 0x3A	; 58
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_setupPinDirection+0xae>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_setupPinDirection+0xaa>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	8e c0       	rjmp	.+284    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                              break;


	case PORTIDB:
               if(Dir==PINPUT)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	a9 f4       	brne	.+42     	; 0x1128 <GPIO_setupPinDirection+0xe8>
                   {

            	   CLEAR_BIT(DDRB,PinNo);
    10fe:	a7 e3       	ldi	r26, 0x37	; 55
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e3       	ldi	r30, 0x37	; 55
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_setupPinDirection+0xdc>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_setupPinDirection+0xd8>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	76 c0       	rjmp	.+236    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	09 f0       	breq	.+2      	; 0x1130 <GPIO_setupPinDirection+0xf0>
    112e:	72 c0       	rjmp	.+228    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRB,PinNo);
    1130:	a7 e3       	ldi	r26, 0x37	; 55
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e7 e3       	ldi	r30, 0x37	; 55
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_setupPinDirection+0x10e>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_setupPinDirection+0x10a>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	5e c0       	rjmp	.+188    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                        }

                              break;
	case PORTIDC:
               if(Dir==PINPUT)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 23       	and	r24, r24
    115c:	a9 f4       	brne	.+42     	; 0x1188 <GPIO_setupPinDirection+0x148>
                   {

            	   CLEAR_BIT(DDRC,PinNo);
    115e:	a4 e3       	ldi	r26, 0x34	; 52
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e4 e3       	ldi	r30, 0x34	; 52
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_setupPinDirection+0x13c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_setupPinDirection+0x138>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	46 c0       	rjmp	.+140    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	09 f0       	breq	.+2      	; 0x1190 <GPIO_setupPinDirection+0x150>
    118e:	42 c0       	rjmp	.+132    	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRC,PinNo);
    1190:	a4 e3       	ldi	r26, 0x34	; 52
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e4 e3       	ldi	r30, 0x34	; 52
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_setupPinDirection+0x16e>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_setupPinDirection+0x16a>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	2e c0       	rjmp	.+92     	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                              break;


	case PORTIDD:
               if(Dir==PINPUT)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 23       	and	r24, r24
    11bc:	a9 f4       	brne	.+42     	; 0x11e8 <GPIO_setupPinDirection+0x1a8>
                   {

            	   CLEAR_BIT(DDRD,PinNo);
    11be:	a1 e3       	ldi	r26, 0x31	; 49
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e1 e3       	ldi	r30, 0x31	; 49
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_setupPinDirection+0x19c>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_setupPinDirection+0x198>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	16 c0       	rjmp	.+44     	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                   }
               else if(Dir==POUTPUT)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	99 f4       	brne	.+38     	; 0x1214 <GPIO_setupPinDirection+0x1d4>

                        {

                           	SET_BIT(DDRD,PinNo);
    11ee:	a1 e3       	ldi	r26, 0x31	; 49
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e1 e3       	ldi	r30, 0x31	; 49
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_setupPinDirection+0x1cc>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_setupPinDirection+0x1c8>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24


}


}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <GPIO_writePin>:

/* Wirte Pin  Func */
void GPIO_writePin(PortIdType PORT , uint8 PinNo, OutputType Out)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <GPIO_writePin+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <GPIO_writePin+0x8>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	6a 83       	std	Y+2, r22	; 0x02
    1236:	4b 83       	std	Y+3, r20	; 0x03

	switch (PORT)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3d 83       	std	Y+5, r19	; 0x05
    1240:	2c 83       	std	Y+4, r18	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <GPIO_writePin+0x2a>
    124c:	47 c0       	rjmp	.+142    	; 0x12dc <GPIO_writePin+0xb8>
    124e:	2c 81       	ldd	r18, Y+4	; 0x04
    1250:	3d 81       	ldd	r19, Y+5	; 0x05
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <GPIO_writePin+0x3e>
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	71 f0       	breq	.+28     	; 0x127c <GPIO_writePin+0x58>
    1260:	cb c0       	rjmp	.+406    	; 0x13f8 <GPIO_writePin+0x1d4>
    1262:	2c 81       	ldd	r18, Y+4	; 0x04
    1264:	3d 81       	ldd	r19, Y+5	; 0x05
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <GPIO_writePin+0x4a>
    126c:	67 c0       	rjmp	.+206    	; 0x133c <GPIO_writePin+0x118>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <GPIO_writePin+0x56>
    1278:	91 c0       	rjmp	.+290    	; 0x139c <GPIO_writePin+0x178>
    127a:	be c0       	rjmp	.+380    	; 0x13f8 <GPIO_writePin+0x1d4>
	{

	case PORTIDA:
               if(Out==PLOW)
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 23       	and	r24, r24
    1280:	a9 f4       	brne	.+42     	; 0x12ac <GPIO_writePin+0x88>
                   {

            	   CLEAR_BIT(PORTA,PinNo);
    1282:	ab e3       	ldi	r26, 0x3B	; 59
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_writePin+0x7c>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_writePin+0x78>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	a6 c0       	rjmp	.+332    	; 0x13f8 <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <GPIO_writePin+0x90>
    12b2:	a2 c0       	rjmp	.+324    	; 0x13f8 <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTA,PinNo);
    12b4:	ab e3       	ldi	r26, 0x3B	; 59
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	eb e3       	ldi	r30, 0x3B	; 59
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_writePin+0xae>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_writePin+0xaa>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	8e c0       	rjmp	.+284    	; 0x13f8 <GPIO_writePin+0x1d4>

                              break;


	case PORTIDB:
               if(Out==PLOW)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 23       	and	r24, r24
    12e0:	a9 f4       	brne	.+42     	; 0x130c <GPIO_writePin+0xe8>
                   {

            	   CLEAR_BIT(PORTB,PinNo);
    12e2:	a8 e3       	ldi	r26, 0x38	; 56
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0xdc>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0xd8>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	76 c0       	rjmp	.+236    	; 0x13f8 <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	09 f0       	breq	.+2      	; 0x1314 <GPIO_writePin+0xf0>
    1312:	72 c0       	rjmp	.+228    	; 0x13f8 <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTB,PinNo);
    1314:	a8 e3       	ldi	r26, 0x38	; 56
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e8 e3       	ldi	r30, 0x38	; 56
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <GPIO_writePin+0x10e>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <GPIO_writePin+0x10a>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	5e c0       	rjmp	.+188    	; 0x13f8 <GPIO_writePin+0x1d4>

                        }

                              break;
	case PORTIDC:
               if(Out==PLOW)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	88 23       	and	r24, r24
    1340:	a9 f4       	brne	.+42     	; 0x136c <GPIO_writePin+0x148>
                   {

            	   CLEAR_BIT(PORTC,PinNo);
    1342:	a5 e3       	ldi	r26, 0x35	; 53
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e3       	ldi	r30, 0x35	; 53
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_writePin+0x13c>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_writePin+0x138>
    1364:	80 95       	com	r24
    1366:	84 23       	and	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	46 c0       	rjmp	.+140    	; 0x13f8 <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	09 f0       	breq	.+2      	; 0x1374 <GPIO_writePin+0x150>
    1372:	42 c0       	rjmp	.+132    	; 0x13f8 <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTC,PinNo);
    1374:	a5 e3       	ldi	r26, 0x35	; 53
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_writePin+0x16e>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_writePin+0x16a>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	2e c0       	rjmp	.+92     	; 0x13f8 <GPIO_writePin+0x1d4>

                              break;


	case PORTIDD:
               if(Out==PLOW)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 23       	and	r24, r24
    13a0:	a9 f4       	brne	.+42     	; 0x13cc <GPIO_writePin+0x1a8>
                   {

            	   CLEAR_BIT(PORTD,PinNo);
    13a2:	a2 e3       	ldi	r26, 0x32	; 50
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e2 e3       	ldi	r30, 0x32	; 50
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_writePin+0x19c>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_writePin+0x198>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	16 c0       	rjmp	.+44     	; 0x13f8 <GPIO_writePin+0x1d4>

                   }
               else if(Out==PHIGH)
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	99 f4       	brne	.+38     	; 0x13f8 <GPIO_writePin+0x1d4>

                        {

                           	SET_BIT(PORTD,PinNo);
    13d2:	a2 e3       	ldi	r26, 0x32	; 50
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e2 e3       	ldi	r30, 0x32	; 50
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <GPIO_writePin+0x1cc>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <GPIO_writePin+0x1c8>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24



}

}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <GPIO_readPin>:

/* Read Pin  Func */
uint8 GPIO_readPin(PortIdType PORT , uint8 PinNo)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <GPIO_readPin+0x6>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <GPIO_readPin+0x8>
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6b 83       	std	Y+3, r22	; 0x03
	uint8 read=0;
    141a:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT)
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3d 83       	std	Y+5, r19	; 0x05
    1424:	2c 83       	std	Y+4, r18	; 0x04
    1426:	4c 81       	ldd	r20, Y+4	; 0x04
    1428:	5d 81       	ldd	r21, Y+5	; 0x05
    142a:	41 30       	cpi	r20, 0x01	; 1
    142c:	51 05       	cpc	r21, r1
    142e:	b1 f1       	breq	.+108    	; 0x149c <GPIO_readPin+0x94>
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	91 05       	cpc	r25, r1
    1438:	34 f4       	brge	.+12     	; 0x1446 <GPIO_readPin+0x3e>
    143a:	2c 81       	ldd	r18, Y+4	; 0x04
    143c:	3d 81       	ldd	r19, Y+5	; 0x05
    143e:	21 15       	cp	r18, r1
    1440:	31 05       	cpc	r19, r1
    1442:	71 f0       	breq	.+28     	; 0x1460 <GPIO_readPin+0x58>
    1444:	84 c0       	rjmp	.+264    	; 0x154e <GPIO_readPin+0x146>
    1446:	4c 81       	ldd	r20, Y+4	; 0x04
    1448:	5d 81       	ldd	r21, Y+5	; 0x05
    144a:	42 30       	cpi	r20, 0x02	; 2
    144c:	51 05       	cpc	r21, r1
    144e:	09 f4       	brne	.+2      	; 0x1452 <GPIO_readPin+0x4a>
    1450:	43 c0       	rjmp	.+134    	; 0x14d8 <GPIO_readPin+0xd0>
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	9d 81       	ldd	r25, Y+5	; 0x05
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	09 f4       	brne	.+2      	; 0x145e <GPIO_readPin+0x56>
    145c:	5b c0       	rjmp	.+182    	; 0x1514 <GPIO_readPin+0x10c>
    145e:	77 c0       	rjmp	.+238    	; 0x154e <GPIO_readPin+0x146>
	{

	case PORTIDA:
               read=GET_BIT(PINA,PinNo);
    1460:	e9 e3       	ldi	r30, 0x39	; 57
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_readPin+0x72>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	2a 95       	dec	r18
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_readPin+0x6e>
    147e:	9a 01       	movw	r18, r20
    1480:	28 23       	and	r18, r24
    1482:	39 23       	and	r19, r25
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <GPIO_readPin+0x8a>
    148e:	55 95       	asr	r21
    1490:	47 95       	ror	r20
    1492:	8a 95       	dec	r24
    1494:	e2 f7       	brpl	.-8      	; 0x148e <GPIO_readPin+0x86>
    1496:	ca 01       	movw	r24, r20
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	59 c0       	rjmp	.+178    	; 0x154e <GPIO_readPin+0x146>
                              break;


	case PORTIDB:
		read=GET_BIT(PINB,PinNo);
    149c:	e6 e3       	ldi	r30, 0x36	; 54
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <GPIO_readPin+0xae>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	2a 95       	dec	r18
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <GPIO_readPin+0xaa>
    14ba:	9a 01       	movw	r18, r20
    14bc:	28 23       	and	r18, r24
    14be:	39 23       	and	r19, r25
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a9 01       	movw	r20, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <GPIO_readPin+0xc6>
    14ca:	55 95       	asr	r21
    14cc:	47 95       	ror	r20
    14ce:	8a 95       	dec	r24
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <GPIO_readPin+0xc2>
    14d2:	ca 01       	movw	r24, r20
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	3b c0       	rjmp	.+118    	; 0x154e <GPIO_readPin+0x146>
                              break;
	case PORTIDC:
		read=GET_BIT(PINC,PinNo);
    14d8:	e3 e3       	ldi	r30, 0x33	; 51
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_readPin+0xea>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	2a 95       	dec	r18
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_readPin+0xe6>
    14f6:	9a 01       	movw	r18, r20
    14f8:	28 23       	and	r18, r24
    14fa:	39 23       	and	r19, r25
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a9 01       	movw	r20, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <GPIO_readPin+0x102>
    1506:	55 95       	asr	r21
    1508:	47 95       	ror	r20
    150a:	8a 95       	dec	r24
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <GPIO_readPin+0xfe>
    150e:	ca 01       	movw	r24, r20
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	1d c0       	rjmp	.+58     	; 0x154e <GPIO_readPin+0x146>
		                      break;


	case PORTIDD:
		read=GET_BIT(PIND,PinNo);
    1514:	e0 e3       	ldi	r30, 0x30	; 48
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_readPin+0x126>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	2a 95       	dec	r18
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_readPin+0x122>
    1532:	9a 01       	movw	r18, r20
    1534:	28 23       	and	r18, r24
    1536:	39 23       	and	r19, r25
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a9 01       	movw	r20, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_readPin+0x13e>
    1542:	55 95       	asr	r21
    1544:	47 95       	ror	r20
    1546:	8a 95       	dec	r24
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_readPin+0x13a>
    154a:	ca 01       	movw	r24, r20
    154c:	89 83       	std	Y+1, r24	; 0x01
		break;

          }

	return read;
    154e:	89 81       	ldd	r24, Y+1	; 0x01





}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <GPIO_setupPortDirection>:


/* Set Port Direction Func */
void GPIO_setupPortDirection(PortIdType port ,PortDirectionType Dir)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_setupPortDirection+0x6>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <GPIO_setupPortDirection+0x8>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	6a 83       	std	Y+2, r22	; 0x02


		switch (port)
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	3c 83       	std	Y+4, r19	; 0x04
    1578:	2b 83       	std	Y+3, r18	; 0x03
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	91 05       	cpc	r25, r1
    1582:	d1 f0       	breq	.+52     	; 0x15b8 <GPIO_setupPortDirection+0x58>
    1584:	2b 81       	ldd	r18, Y+3	; 0x03
    1586:	3c 81       	ldd	r19, Y+4	; 0x04
    1588:	22 30       	cpi	r18, 0x02	; 2
    158a:	31 05       	cpc	r19, r1
    158c:	2c f4       	brge	.+10     	; 0x1598 <GPIO_setupPortDirection+0x38>
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	61 f0       	breq	.+24     	; 0x15ae <GPIO_setupPortDirection+0x4e>
    1596:	1e c0       	rjmp	.+60     	; 0x15d4 <GPIO_setupPortDirection+0x74>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	31 05       	cpc	r19, r1
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <GPIO_setupPortDirection+0x62>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	83 30       	cpi	r24, 0x03	; 3
    15a8:	91 05       	cpc	r25, r1
    15aa:	81 f0       	breq	.+32     	; 0x15cc <GPIO_setupPortDirection+0x6c>
    15ac:	13 c0       	rjmp	.+38     	; 0x15d4 <GPIO_setupPortDirection+0x74>
		{

		case PORTIDA:
	               DDRA=Dir;
    15ae:	ea e3       	ldi	r30, 0x3A	; 58
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	80 83       	st	Z, r24
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <GPIO_setupPortDirection+0x74>
	               break;


		case PORTIDB:
			     DDRB=Dir;
    15b8:	e7 e3       	ldi	r30, 0x37	; 55
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	80 83       	st	Z, r24
    15c0:	09 c0       	rjmp	.+18     	; 0x15d4 <GPIO_setupPortDirection+0x74>
			     break;
		case PORTIDC:
			     DDRC=Dir;
    15c2:	e4 e3       	ldi	r30, 0x34	; 52
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	80 83       	st	Z, r24
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <GPIO_setupPortDirection+0x74>
			     break;


		case PORTIDD:
			DDRD=Dir;
    15cc:	e1 e3       	ldi	r30, 0x31	; 49
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	80 83       	st	Z, r24

	          }



}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <GPIO_writePort>:

/* Write Port Value */
void GPIO_writePort(PortIdType port , uint8 value)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_writePort+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <GPIO_writePort+0x8>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02


	switch (port)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3c 83       	std	Y+4, r19	; 0x04
    15fa:	2b 83       	std	Y+3, r18	; 0x03
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	d1 f0       	breq	.+52     	; 0x163a <GPIO_writePort+0x58>
    1606:	2b 81       	ldd	r18, Y+3	; 0x03
    1608:	3c 81       	ldd	r19, Y+4	; 0x04
    160a:	22 30       	cpi	r18, 0x02	; 2
    160c:	31 05       	cpc	r19, r1
    160e:	2c f4       	brge	.+10     	; 0x161a <GPIO_writePort+0x38>
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	61 f0       	breq	.+24     	; 0x1630 <GPIO_writePort+0x4e>
    1618:	1e c0       	rjmp	.+60     	; 0x1656 <GPIO_writePort+0x74>
    161a:	2b 81       	ldd	r18, Y+3	; 0x03
    161c:	3c 81       	ldd	r19, Y+4	; 0x04
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	81 f0       	breq	.+32     	; 0x1644 <GPIO_writePort+0x62>
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	91 05       	cpc	r25, r1
    162c:	81 f0       	breq	.+32     	; 0x164e <GPIO_writePort+0x6c>
    162e:	13 c0       	rjmp	.+38     	; 0x1656 <GPIO_writePort+0x74>
			{

			case PORTIDA:
		             PORTA=value;
    1630:	eb e3       	ldi	r30, 0x3B	; 59
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	80 83       	st	Z, r24
    1638:	0e c0       	rjmp	.+28     	; 0x1656 <GPIO_writePort+0x74>
		             break;


			case PORTIDB:
				     PORTB=value;
    163a:	e8 e3       	ldi	r30, 0x38	; 56
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	80 83       	st	Z, r24
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <GPIO_writePort+0x74>
				     break;
			case PORTIDC:
				     PORTC=value;
    1644:	e5 e3       	ldi	r30, 0x35	; 53
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	80 83       	st	Z, r24
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <GPIO_writePort+0x74>
				     break;


			case PORTIDD:
				     PORTD=value;
    164e:	e2 e3       	ldi	r30, 0x32	; 50
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	80 83       	st	Z, r24
		          }




}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <GPIO_readPort>:

/* Read Port Value */
uint8 GPIO_readPort(PortIdType port)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_readPort+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_readPort+0x8>
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=0;
    1672:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3c 83       	std	Y+4, r19	; 0x04
    167c:	2b 83       	std	Y+3, r18	; 0x03
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	d1 f0       	breq	.+52     	; 0x16bc <GPIO_readPort+0x58>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	2c f4       	brge	.+10     	; 0x169c <GPIO_readPort+0x38>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	61 f0       	breq	.+24     	; 0x16b2 <GPIO_readPort+0x4e>
    169a:	1e c0       	rjmp	.+60     	; 0x16d8 <GPIO_readPort+0x74>
    169c:	2b 81       	ldd	r18, Y+3	; 0x03
    169e:	3c 81       	ldd	r19, Y+4	; 0x04
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	81 f0       	breq	.+32     	; 0x16c6 <GPIO_readPort+0x62>
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	83 30       	cpi	r24, 0x03	; 3
    16ac:	91 05       	cpc	r25, r1
    16ae:	81 f0       	breq	.+32     	; 0x16d0 <GPIO_readPort+0x6c>
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <GPIO_readPort+0x74>
				{

				case PORTIDA:
			             value=PINA;
    16b2:	e9 e3       	ldi	r30, 0x39	; 57
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	0e c0       	rjmp	.+28     	; 0x16d8 <GPIO_readPort+0x74>
			             break;


				case PORTIDB:
					     value=PINB;
    16bc:	e6 e3       	ldi	r30, 0x36	; 54
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <GPIO_readPort+0x74>
					     break;
				case PORTIDC:
					     value=PINC;
    16c6:	e3 e3       	ldi	r30, 0x33	; 51
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <GPIO_readPort+0x74>
					     break;


				case PORTIDD:
					     value=PIND;
    16d0:	e0 e3       	ldi	r30, 0x30	; 48
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	89 83       	std	Y+1, r24	; 0x01
				     	 break;

			          }

return value;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01

}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <LCD_SendCommand>:




void LCD_SendCommand(uint8 Comm) /* Send Commands Func */
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	6d 97       	sbiw	r28, 0x1d	; 29
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	8d 8f       	std	Y+29, r24	; 0x1d

	GPIO_writePin(LCD_RS_E_PORT,LCD_RS_PIN,PLOW); /* LCD RS Command Select */
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e8       	ldi	r26, 0x80	; 128
    170e:	bf e3       	ldi	r27, 0x3F	; 63
    1710:	89 8f       	std	Y+25, r24	; 0x19
    1712:	9a 8f       	std	Y+26, r25	; 0x1a
    1714:	ab 8f       	std	Y+27, r26	; 0x1b
    1716:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	69 8d       	ldd	r22, Y+25	; 0x19
    171a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    171c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	53 e4       	ldi	r21, 0x43	; 67
    1728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8d 8b       	std	Y+21, r24	; 0x15
    1732:	9e 8b       	std	Y+22, r25	; 0x16
    1734:	af 8b       	std	Y+23, r26	; 0x17
    1736:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1738:	6d 89       	ldd	r22, Y+21	; 0x15
    173a:	7e 89       	ldd	r23, Y+22	; 0x16
    173c:	8f 89       	ldd	r24, Y+23	; 0x17
    173e:	98 8d       	ldd	r25, Y+24	; 0x18
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <LCD_SendCommand+0x72>
		__ticks = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 8b       	std	Y+20, r25	; 0x14
    1756:	8b 8b       	std	Y+19, r24	; 0x13
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    175a:	6d 89       	ldd	r22, Y+21	; 0x15
    175c:	7e 89       	ldd	r23, Y+22	; 0x16
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	69 8d       	ldd	r22, Y+25	; 0x19
    1774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <LCD_SendCommand+0xd2>
    179c:	89 e1       	ldi	r24, 0x19	; 25
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9a 8b       	std	Y+18, r25	; 0x12
    17a2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17a4:	89 89       	ldd	r24, Y+17	; 0x11
    17a6:	9a 89       	ldd	r25, Y+18	; 0x12
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_SendCommand+0xc0>
    17ac:	9a 8b       	std	Y+18, r25	; 0x12
    17ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	9c 89       	ldd	r25, Y+20	; 0x14
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9c 8b       	std	Y+20, r25	; 0x14
    17b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8b 89       	ldd	r24, Y+19	; 0x13
    17bc:	9c 89       	ldd	r25, Y+20	; 0x14
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <LCD_SendCommand+0xb4>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	6d 89       	ldd	r22, Y+21	; 0x15
    17c6:	7e 89       	ldd	r23, Y+22	; 0x16
    17c8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ca:	98 8d       	ldd	r25, Y+24	; 0x18
    17cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9c 8b       	std	Y+20, r25	; 0x14
    17d6:	8b 8b       	std	Y+19, r24	; 0x13
    17d8:	8b 89       	ldd	r24, Y+19	; 0x13
    17da:	9c 89       	ldd	r25, Y+20	; 0x14
    17dc:	98 8b       	std	Y+16, r25	; 0x10
    17de:	8f 87       	std	Y+15, r24	; 0x0f
    17e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e2:	98 89       	ldd	r25, Y+16	; 0x10
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_SendCommand+0xfc>
    17e8:	98 8b       	std	Y+16, r25	; 0x10
    17ea:	8f 87       	std	Y+15, r24	; 0x0f


#elif   LCD_PINNUMBER==8 /* Used 8 bits */


		   GPIO_writePort(LCD_PORT, Comm);
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    17f0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <GPIO_writePort>

	  /* Enable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PHIGH);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a0 e0       	ldi	r26, 0x00	; 0
    1804:	b0 e4       	ldi	r27, 0x40	; 64
    1806:	8b 87       	std	Y+11, r24	; 0x0b
    1808:	9c 87       	std	Y+12, r25	; 0x0c
    180a:	ad 87       	std	Y+13, r26	; 0x0d
    180c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a e7       	ldi	r20, 0x7A	; 122
    181c:	53 e4       	ldi	r21, 0x43	; 67
    181e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8f 83       	std	Y+7, r24	; 0x07
    1828:	98 87       	std	Y+8, r25	; 0x08
    182a:	a9 87       	std	Y+9, r26	; 0x09
    182c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1842:	88 23       	and	r24, r24
    1844:	2c f4       	brge	.+10     	; 0x1850 <LCD_SendCommand+0x168>
		__ticks = 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	3f c0       	rjmp	.+126    	; 0x18ce <LCD_SendCommand+0x1e6>
	else if (__tmp > 65535)
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	57 e4       	ldi	r21, 0x47	; 71
    1860:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1864:	18 16       	cp	r1, r24
    1866:	4c f5       	brge	.+82     	; 0x18ba <LCD_SendCommand+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	7c 85       	ldd	r23, Y+12	; 0x0c
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <LCD_SendCommand+0x1c8>
    1892:	89 e1       	ldi	r24, 0x19	; 25
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_SendCommand+0x1b6>
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	69 f7       	brne	.-38     	; 0x1892 <LCD_SendCommand+0x1aa>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <LCD_SendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_SendCommand+0x1f2>
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01

		/* Delay for Some Seconds */
		_delay_ms(2);

		/* Disable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PLOW);
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
#endif



}
    18ec:	6d 96       	adiw	r28, 0x1d	; 29
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LCD_Init>:


void LCD_Init(void) /* Init Func */
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	2e 97       	sbiw	r28, 0x0e	; 14
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 e2       	ldi	r26, 0x20	; 32
    1918:	b2 e4       	ldi	r27, 0x42	; 66
    191a:	8b 87       	std	Y+11, r24	; 0x0b
    191c:	9c 87       	std	Y+12, r25	; 0x0c
    191e:	ad 87       	std	Y+13, r26	; 0x0d
    1920:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a e7       	ldi	r20, 0x7A	; 122
    1930:	53 e4       	ldi	r21, 0x43	; 67
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8f 83       	std	Y+7, r24	; 0x07
    193c:	98 87       	std	Y+8, r25	; 0x08
    193e:	a9 87       	std	Y+9, r26	; 0x09
    1940:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <LCD_Init+0x66>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6b 85       	ldd	r22, Y+11	; 0x0b
    197e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	9e 85       	ldd	r25, Y+14	; 0x0e
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <LCD_Init+0xc6>
    19a6:	89 e1       	ldi	r24, 0x19	; 25
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_Init+0xb4>
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <LCD_Init+0xa8>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_Init+0xf0>
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40); /* Delay As Data Sheet */


	/* Make Enable Pin Output */
	GPIO_setupPinDirection(LCD_RS_E_PORT, LCD_E_PIN, POUTPUT);
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	0e 94 20 08 	call	0x1040	; 0x1040 <GPIO_setupPinDirection>
	/* Make RS Pin Output */
    GPIO_setupPinDirection(LCD_RS_E_PORT, LCD_RS_PIN, POUTPUT);
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 20 08 	call	0x1040	; 0x1040 <GPIO_setupPinDirection>

#if LCD_PINNUMBER==8
	/* LCD PORTS Init */
	GPIO_setupPortDirection(LCD_PORT, PORTOUT);
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	6f ef       	ldi	r22, 0xFF	; 255
    1a0e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <GPIO_setupPortDirection>
	GPIO_setupPinDirection(LCD_PORT, LCD_PIN3, POUTPUT);

#endif

	/* Mode Selection */
	LCD_SendCommand(LCD_INITCOMM);
    1a12:	88 e3       	ldi	r24, 0x38	; 56
    1a14:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_SendCommand>

	/* Display and Cursor Selection */
	LCD_SendCommand(LCD_DisplayOnCursorOff);
    1a18:	8c e0       	ldi	r24, 0x0C	; 12
    1a1a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_SendCommand>

	/* Clear Screen */
	LCD_SendCommand(LCD_CLEAR);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_SendCommand>
}
    1a24:	2e 96       	adiw	r28, 0x0e	; 14
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_DisplayChar>:




void LCD_DisplayChar(uint8 data) /* Send char Func */
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	8d 8f       	std	Y+29, r24	; 0x1d


	GPIO_writePin(LCD_RS_E_PORT,LCD_RS_PIN,PHIGH); /* LCD RS Command Select */ /* LCD RS Command Select */
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	89 8f       	std	Y+25, r24	; 0x19
    1a60:	9a 8f       	std	Y+26, r25	; 0x1a
    1a62:	ab 8f       	std	Y+27, r26	; 0x1b
    1a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a e7       	ldi	r20, 0x7A	; 122
    1a74:	53 e4       	ldi	r21, 0x43	; 67
    1a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_DisplayChar+0x72>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_DisplayChar+0xf0>
	else if (__tmp > 65535)
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_DisplayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_DisplayChar+0xd2>
    1aea:	89 e1       	ldi	r24, 0x19	; 25
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	9a 89       	ldd	r25, Y+18	; 0x12
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_DisplayChar+0xc0>
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_DisplayChar+0xb4>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_DisplayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_DisplayChar+0xfc>
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f


#elif   LCD_PINNUMBER==8 /* Used 8 bits */


	   GPIO_writePort(LCD_PORT, data);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b3e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <GPIO_writePort>

	  /* Enable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PHIGH);
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e4       	ldi	r27, 0x40	; 64
    1b54:	8b 87       	std	Y+11, r24	; 0x0b
    1b56:	9c 87       	std	Y+12, r25	; 0x0c
    1b58:	ad 87       	std	Y+13, r26	; 0x0d
    1b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a e7       	ldi	r20, 0x7A	; 122
    1b6a:	53 e4       	ldi	r21, 0x43	; 67
    1b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8f 83       	std	Y+7, r24	; 0x07
    1b76:	98 87       	std	Y+8, r25	; 0x08
    1b78:	a9 87       	std	Y+9, r26	; 0x09
    1b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <LCD_DisplayChar+0x168>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <LCD_DisplayChar+0x1e6>
	else if (__tmp > 65535)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <LCD_DisplayChar+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <LCD_DisplayChar+0x1c8>
    1be0:	89 e1       	ldi	r24, 0x19	; 25
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_DisplayChar+0x1b6>
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <LCD_DisplayChar+0x1aa>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <LCD_DisplayChar+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_DisplayChar+0x1f2>
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01

		/* Delay for Some Seconds */
		_delay_ms(2);

		/* Disable Sending */
		GPIO_writePin(LCD_RS_E_PORT,LCD_E_PIN,PLOW);
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePin>





}
    1c3a:	6d 96       	adiw	r28, 0x1d	; 29
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <LCD_DisplayString>:
void LCD_DisplayString(const uint8* data) /* Send String Func */
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <LCD_DisplayString+0x6>
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	9b 83       	std	Y+3, r25	; 0x03
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
uint8 count=0;
    1c5c:	19 82       	std	Y+1, r1	; 0x01
    1c5e:	0e c0       	rjmp	.+28     	; 0x1c7c <LCD_DisplayString+0x30>
	/* Looping Over The String till The End and Send data */
    while(*(data+count) != '\0' )
    {
       /* Send Char Via lcd */
    	LCD_DisplayChar(*(data+count));
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	e2 0f       	add	r30, r18
    1c6e:	f3 1f       	adc	r31, r19
    1c70:	80 81       	ld	r24, Z
    1c72:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_DisplayChar>

    	/* Increment count */
    	count++;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_DisplayString(const uint8* data) /* Send String Func */
{
uint8 count=0;
	/* Looping Over The String till The End and Send data */
    while(*(data+count) != '\0' )
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
    1c86:	fc 01       	movw	r30, r24
    1c88:	e2 0f       	add	r30, r18
    1c8a:	f3 1f       	adc	r31, r19
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	39 f7       	brne	.-50     	; 0x1c60 <LCD_DisplayString+0x14>
    	/* Increment count */
    	count++;

    }

}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <LCD_MoveCursor>:
void LCD_MoveCursor(uint8 row,uint8 column)/* Move Cursor Func */
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <LCD_MoveCursor+0x6>
    1ca4:	0f 92       	push	r0
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	8a 83       	std	Y+2, r24	; 0x02
    1cac:	6b 83       	std	Y+3, r22	; 0x03



	// Initialising a Variable To store the address we want to write in
		uint8 Address=0;
    1cae:	19 82       	std	Y+1, r1	; 0x01

		// Test cases for the invalid inputs
		if(column>15 || column<0)
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	80 31       	cpi	r24, 0x10	; 16
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <LCD_MoveCursor+0x1a>
		{
			column=0;
    1cb6:	1b 82       	std	Y+3, r1	; 0x03
		}
		if(row != 1 && row != 0 )
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	29 f0       	breq	.+10     	; 0x1cc8 <LCD_MoveCursor+0x2a>
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	88 23       	and	r24, r24
    1cc2:	11 f0       	breq	.+4      	; 0x1cc8 <LCD_MoveCursor+0x2a>
			{
				row=1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
			}

		// if we want to write at the first row we select the position directlcolumn from column Number
		if(row==0)
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	88 23       	and	r24, r24
    1ccc:	19 f4       	brne	.+6      	; 0x1cd4 <LCD_MoveCursor+0x36>
		{
			Address=column;
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	06 c0       	rjmp	.+12     	; 0x1ce0 <LCD_MoveCursor+0x42>
		}

		/* if we want to write at the 2nd row we select the position
		 * by adding column Number +0x40 (data sheet)*/

		else if(row==1)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	19 f4       	brne	.+6      	; 0x1ce0 <LCD_MoveCursor+0x42>
			{
				Address=0x40+column;
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	80 5c       	subi	r24, 0xC0	; 192
    1cde:	89 83       	std	Y+1, r24	; 0x01

			}
		// address is 7 bits and MSB must be = 1 (data sheet )
			SET_BIT(Address,7);
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	80 68       	ori	r24, 0x80	; 128
    1ce4:	89 83       	std	Y+1, r24	; 0x01
			// sending command to LCD
			LCD_SendCommand(Address);
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_SendCommand>




}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <LCD_MoveAndDisplayString>:


void LCD_MoveAndDisplayString(uint8* data,uint8 row,uint8 column) /* Move Cursor And Display String Func */
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <LCD_MoveAndDisplayString+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <LCD_MoveAndDisplayString+0x8>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	6b 83       	std	Y+3, r22	; 0x03
    1d0a:	4c 83       	std	Y+4, r20	; 0x04
	/* Setting The Cursor to The right position */
	LCD_MoveCursor(row,column);
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	6c 81       	ldd	r22, Y+4	; 0x04
    1d10:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_MoveCursor>

	/* Sending The String */

	LCD_DisplayString(data);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_DisplayString>

}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <LCD_ClearScreen>:
void LCD_ClearScreen(void) /* Clear Screen */
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    /* Send Clear Command */
	LCD_SendCommand(LCD_CLEAR);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_SendCommand>



}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <LCD_IntegerDisplay>:
void LCD_IntegerDisplay(uint8 data) /* Display Integers */
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	61 97       	sbiw	r28, 0x11	; 17
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	89 8b       	std	Y+17, r24	; 0x11
	char digits[16];/* String to hold the ascii result */
	itoa(data,digits,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d54:	89 89       	ldd	r24, Y+17	; 0x11
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9e 01       	movw	r18, r28
    1d5c:	2f 5f       	subi	r18, 0xFF	; 255
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	b9 01       	movw	r22, r18
    1d62:	4a e0       	ldi	r20, 0x0A	; 10
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	0e 94 4c 10 	call	0x2098	; 0x2098 <itoa>
    LCD_DisplayString(digits); /* Display String */
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_DisplayString>

}
    1d72:	61 96       	adiw	r28, 0x11	; 17
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <main>:
*
*                                                Main
*
**************************************************************************************************************************************/
int main (void)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <main+0x6>
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
	/* Variables Init*/
	uint8 read=0;
    1d90:	19 82       	std	Y+1, r1	; 0x01

   /* Init ADC Config Variable*/
   ADC_ConfigType AdcConfig;

   /* Adding Config for ADC*/
   AdcConfig.prescaler=ADC_DIV8;
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	8b 83       	std	Y+3, r24	; 0x03
   AdcConfig.ref_volt=ADC_INTERNAL;
    1d96:	80 ec       	ldi	r24, 0xC0	; 192
    1d98:	8a 83       	std	Y+2, r24	; 0x02

   /*Adc Init */
	ADC_init(&AdcConfig);
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	02 96       	adiw	r24, 0x02	; 2
    1d9e:	0e 94 6d 07 	call	0xeda	; 0xeda <ADC_init>

   /*LCD Init  */
    LCD_Init();
    1da2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Init>
    LCD_DisplayString("FAN IS ");
    1da6:	80 e6       	ldi	r24, 0x60	; 96
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_DisplayString>
    LCD_MoveAndDisplayString("TEMP = ", 1, 0);
    1dae:	88 e6       	ldi	r24, 0x68	; 104
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_MoveAndDisplayString>

   /*Motor Init*/
    DcMotor_Init();
    1dba:	0e 94 d7 07 	call	0xfae	; 0xfae <DcMotor_Init>

while(1)
{

	/* Get Temp */
	read=LM35_getTemperature();
    1dbe:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LM35_getTemperature>
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	LCD_MoveCursor(1,8);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	68 e0       	ldi	r22, 0x08	; 8
    1dc8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_MoveCursor>
	LCD_IntegerDisplay(read);
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_IntegerDisplay>
    LCD_DisplayString(" C   ");
    1dd2:	80 e7       	ldi	r24, 0x70	; 112
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_DisplayString>
    if(read>=0 && read<30)
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	8e 31       	cpi	r24, 0x1E	; 30
    1dde:	58 f4       	brcc	.+22     	; 0x1df6 <main+0x72>
    {
    	LCD_MoveAndDisplayString("OFF", 0, 8);
    1de0:	86 e7       	ldi	r24, 0x76	; 118
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	48 e0       	ldi	r20, 0x08	; 8
    1de8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_MoveAndDisplayString>
    	DcMotor_Rotate(Stop,0);
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DcMotor_Rotate>
    1df4:	e4 cf       	rjmp	.-56     	; 0x1dbe <main+0x3a>

    }
    else if(read>=30 && read<60)
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	8e 31       	cpi	r24, 0x1E	; 30
    1dfa:	70 f0       	brcs	.+28     	; 0x1e18 <main+0x94>
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	8c 33       	cpi	r24, 0x3C	; 60
    1e00:	58 f4       	brcc	.+22     	; 0x1e18 <main+0x94>
    {
    	    	LCD_MoveAndDisplayString("ON ", 0, 8);
    1e02:	8a e7       	ldi	r24, 0x7A	; 122
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	48 e0       	ldi	r20, 0x08	; 8
    1e0a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_MoveAndDisplayString>
    	    	DcMotor_Rotate(ClockWise,25);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	69 e1       	ldi	r22, 0x19	; 25
    1e12:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DcMotor_Rotate>
    1e16:	d3 cf       	rjmp	.-90     	; 0x1dbe <main+0x3a>

    }
    else if(read>=60 && read<90)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	8c 33       	cpi	r24, 0x3C	; 60
    1e1c:	70 f0       	brcs	.+28     	; 0x1e3a <main+0xb6>
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	8a 35       	cpi	r24, 0x5A	; 90
    1e22:	58 f4       	brcc	.+22     	; 0x1e3a <main+0xb6>
     {
     	    	LCD_MoveAndDisplayString("ON ", 0, 8);
    1e24:	8a e7       	ldi	r24, 0x7A	; 122
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	48 e0       	ldi	r20, 0x08	; 8
    1e2c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_MoveAndDisplayString>
     	    	DcMotor_Rotate(ClockWise,50);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	62 e3       	ldi	r22, 0x32	; 50
    1e34:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DcMotor_Rotate>
    1e38:	c2 cf       	rjmp	.-124    	; 0x1dbe <main+0x3a>

     }
    else if(read>=90 && read<120)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8a 35       	cpi	r24, 0x5A	; 90
    1e3e:	70 f0       	brcs	.+28     	; 0x1e5c <main+0xd8>
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	88 37       	cpi	r24, 0x78	; 120
    1e44:	58 f4       	brcc	.+22     	; 0x1e5c <main+0xd8>
     {
     	    	LCD_MoveAndDisplayString("ON ", 0, 8);
    1e46:	8a e7       	ldi	r24, 0x7A	; 122
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	48 e0       	ldi	r20, 0x08	; 8
    1e4e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_MoveAndDisplayString>
     	    	DcMotor_Rotate(ClockWise,75);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	6b e4       	ldi	r22, 0x4B	; 75
    1e56:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DcMotor_Rotate>
    1e5a:	b1 cf       	rjmp	.-158    	; 0x1dbe <main+0x3a>

     }
    else if(read>=120)
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	88 37       	cpi	r24, 0x78	; 120
    1e60:	08 f4       	brcc	.+2      	; 0x1e64 <main+0xe0>
    1e62:	ad cf       	rjmp	.-166    	; 0x1dbe <main+0x3a>
     {
     	    	LCD_MoveAndDisplayString("ON ", 0, 8);
    1e64:	8a e7       	ldi	r24, 0x7A	; 122
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	48 e0       	ldi	r20, 0x08	; 8
    1e6c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_MoveAndDisplayString>
     	    	DcMotor_Rotate(ClockWise,100);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	64 e6       	ldi	r22, 0x64	; 100
    1e74:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DcMotor_Rotate>
    1e78:	a2 cf       	rjmp	.-188    	; 0x1dbe <main+0x3a>

00001e7a <PWM_Timer0_Start>:
*
**************************************************************************************************************************************/

/* Timer PWM Start Function With The given Duty Cycle */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <PWM_Timer0_Start+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	8a 83       	std	Y+2, r24	; 0x02
   /* init Variable */
	uint8 speed=0;
    1e86:	19 82       	std	Y+1, r1	; 0x01
	/* Setting The Timer Mode To PWM*/
	SET_BIT(TCCR0,WGM01);
    1e88:	a3 e5       	ldi	r26, 0x53	; 83
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e3 e5       	ldi	r30, 0x53	; 83
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	88 60       	ori	r24, 0x08	; 8
    1e94:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM00);
    1e96:	a3 e5       	ldi	r26, 0x53	; 83
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e3 e5       	ldi	r30, 0x53	; 83
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 64       	ori	r24, 0x40	; 64
    1ea2:	8c 93       	st	X, r24
	/* Setting Non Inverting Mode */
	SET_BIT(TCCR0,COM01);
    1ea4:	a3 e5       	ldi	r26, 0x53	; 83
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e3 e5       	ldi	r30, 0x53	; 83
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 62       	ori	r24, 0x20	; 32
    1eb0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM00);
    1eb2:	a3 e5       	ldi	r26, 0x53	; 83
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e3 e5       	ldi	r30, 0x53	; 83
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 7e       	andi	r24, 0xEF	; 239
    1ebe:	8c 93       	st	X, r24
	/* Select Prescaler */
	SET_BIT(TCCR0,CS01);
    1ec0:	a3 e5       	ldi	r26, 0x53	; 83
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e3 e5       	ldi	r30, 0x53	; 83
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS00);
    1ece:	a3 e5       	ldi	r26, 0x53	; 83
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e3 e5       	ldi	r30, 0x53	; 83
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8e 7f       	andi	r24, 0xFE	; 254
    1eda:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    1edc:	a3 e5       	ldi	r26, 0x53	; 83
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e3 e5       	ldi	r30, 0x53	; 83
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8b 7f       	andi	r24, 0xFB	; 251
    1ee8:	8c 93       	st	X, r24
	/* Initial value 0*/
	TCNT0=0;
    1eea:	e2 e5       	ldi	r30, 0x52	; 82
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	10 82       	st	Z, r1

	 /* Set OC0 As an output */
	    GPIO_setupPinDirection(PORTIDB,3, POUTPUT);
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	63 e0       	ldi	r22, 0x03	; 3
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 20 08 	call	0x1040	; 0x1040 <GPIO_setupPinDirection>

if(duty_cycle>=0 && duty_cycle<=100)
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	85 36       	cpi	r24, 0x65	; 101
    1efe:	60 f5       	brcc	.+88     	; 0x1f58 <PWM_Timer0_Start+0xde>
  {
	/* Mapping the Input To The Register Value */
	speed= (uint8) ( ((float) 255* ( duty_cycle))/(100));
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	aa 27       	eor	r26, r26
    1f08:	97 fd       	sbrc	r25, 7
    1f0a:	a0 95       	com	r26
    1f0c:	ba 2f       	mov	r27, r26
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	53 e4       	ldi	r21, 0x43	; 67
    1f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	48 ec       	ldi	r20, 0xC8	; 200
    1f38:	52 e4       	ldi	r21, 0x42	; 66
    1f3a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	89 83       	std	Y+1, r24	; 0x01

	/* Adding The Value To the Register */
	OCR0=speed;
    1f50:	ec e5       	ldi	r30, 0x5C	; 92
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	80 83       	st	Z, r24
}




}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <LM35_getTemperature+0x6>
    1f68:	0f 92       	push	r0
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    1f6e:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    1f70:	1a 82       	std	Y+2, r1	; 0x02
    1f72:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_ReadChannel(SENSOR_CHANNEL_ID);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	0e 94 9f 07 	call	0xf3e	; 0xf3e <ADC_ReadChannel>
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	cc 01       	movw	r24, r24
    1f84:	a0 e0       	ldi	r26, 0x00	; 0
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	26 e9       	ldi	r18, 0x96	; 150
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__mulsi3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	2a e0       	ldi	r18, 0x0A	; 10
    1fae:	37 ed       	ldi	r19, 0xD7	; 215
    1fb0:	43 e2       	ldi	r20, 0x23	; 35
    1fb2:	50 e4       	ldi	r21, 0x40	; 64
    1fb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 ec       	ldi	r20, 0xC0	; 192
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8b 83       	std	Y+3, r24	; 0x03


	return temp_value;
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <__mulsi3>:
    1fec:	62 9f       	mul	r22, r18
    1fee:	d0 01       	movw	r26, r0
    1ff0:	73 9f       	mul	r23, r19
    1ff2:	f0 01       	movw	r30, r0
    1ff4:	82 9f       	mul	r24, r18
    1ff6:	e0 0d       	add	r30, r0
    1ff8:	f1 1d       	adc	r31, r1
    1ffa:	64 9f       	mul	r22, r20
    1ffc:	e0 0d       	add	r30, r0
    1ffe:	f1 1d       	adc	r31, r1
    2000:	92 9f       	mul	r25, r18
    2002:	f0 0d       	add	r31, r0
    2004:	83 9f       	mul	r24, r19
    2006:	f0 0d       	add	r31, r0
    2008:	74 9f       	mul	r23, r20
    200a:	f0 0d       	add	r31, r0
    200c:	65 9f       	mul	r22, r21
    200e:	f0 0d       	add	r31, r0
    2010:	99 27       	eor	r25, r25
    2012:	72 9f       	mul	r23, r18
    2014:	b0 0d       	add	r27, r0
    2016:	e1 1d       	adc	r30, r1
    2018:	f9 1f       	adc	r31, r25
    201a:	63 9f       	mul	r22, r19
    201c:	b0 0d       	add	r27, r0
    201e:	e1 1d       	adc	r30, r1
    2020:	f9 1f       	adc	r31, r25
    2022:	bd 01       	movw	r22, r26
    2024:	cf 01       	movw	r24, r30
    2026:	11 24       	eor	r1, r1
    2028:	08 95       	ret

0000202a <__prologue_saves__>:
    202a:	2f 92       	push	r2
    202c:	3f 92       	push	r3
    202e:	4f 92       	push	r4
    2030:	5f 92       	push	r5
    2032:	6f 92       	push	r6
    2034:	7f 92       	push	r7
    2036:	8f 92       	push	r8
    2038:	9f 92       	push	r9
    203a:	af 92       	push	r10
    203c:	bf 92       	push	r11
    203e:	cf 92       	push	r12
    2040:	df 92       	push	r13
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	ca 1b       	sub	r28, r26
    2054:	db 0b       	sbc	r29, r27
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	09 94       	ijmp

00002062 <__epilogue_restores__>:
    2062:	2a 88       	ldd	r2, Y+18	; 0x12
    2064:	39 88       	ldd	r3, Y+17	; 0x11
    2066:	48 88       	ldd	r4, Y+16	; 0x10
    2068:	5f 84       	ldd	r5, Y+15	; 0x0f
    206a:	6e 84       	ldd	r6, Y+14	; 0x0e
    206c:	7d 84       	ldd	r7, Y+13	; 0x0d
    206e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2070:	9b 84       	ldd	r9, Y+11	; 0x0b
    2072:	aa 84       	ldd	r10, Y+10	; 0x0a
    2074:	b9 84       	ldd	r11, Y+9	; 0x09
    2076:	c8 84       	ldd	r12, Y+8	; 0x08
    2078:	df 80       	ldd	r13, Y+7	; 0x07
    207a:	ee 80       	ldd	r14, Y+6	; 0x06
    207c:	fd 80       	ldd	r15, Y+5	; 0x05
    207e:	0c 81       	ldd	r16, Y+4	; 0x04
    2080:	1b 81       	ldd	r17, Y+3	; 0x03
    2082:	aa 81       	ldd	r26, Y+2	; 0x02
    2084:	b9 81       	ldd	r27, Y+1	; 0x01
    2086:	ce 0f       	add	r28, r30
    2088:	d1 1d       	adc	r29, r1
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	ed 01       	movw	r28, r26
    2096:	08 95       	ret

00002098 <itoa>:
    2098:	fb 01       	movw	r30, r22
    209a:	9f 01       	movw	r18, r30
    209c:	e8 94       	clt
    209e:	42 30       	cpi	r20, 0x02	; 2
    20a0:	c4 f0       	brlt	.+48     	; 0x20d2 <itoa+0x3a>
    20a2:	45 32       	cpi	r20, 0x25	; 37
    20a4:	b4 f4       	brge	.+44     	; 0x20d2 <itoa+0x3a>
    20a6:	4a 30       	cpi	r20, 0x0A	; 10
    20a8:	29 f4       	brne	.+10     	; 0x20b4 <itoa+0x1c>
    20aa:	97 fb       	bst	r25, 7
    20ac:	1e f4       	brtc	.+6      	; 0x20b4 <itoa+0x1c>
    20ae:	90 95       	com	r25
    20b0:	81 95       	neg	r24
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	64 2f       	mov	r22, r20
    20b6:	77 27       	eor	r23, r23
    20b8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__udivmodhi4>
    20bc:	80 5d       	subi	r24, 0xD0	; 208
    20be:	8a 33       	cpi	r24, 0x3A	; 58
    20c0:	0c f0       	brlt	.+2      	; 0x20c4 <itoa+0x2c>
    20c2:	89 5d       	subi	r24, 0xD9	; 217
    20c4:	81 93       	st	Z+, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	a1 f7       	brne	.-24     	; 0x20b4 <itoa+0x1c>
    20cc:	16 f4       	brtc	.+4      	; 0x20d2 <itoa+0x3a>
    20ce:	5d e2       	ldi	r21, 0x2D	; 45
    20d0:	51 93       	st	Z+, r21
    20d2:	10 82       	st	Z, r1
    20d4:	c9 01       	movw	r24, r18
    20d6:	0c 94 6d 10 	jmp	0x20da	; 0x20da <strrev>

000020da <strrev>:
    20da:	dc 01       	movw	r26, r24
    20dc:	fc 01       	movw	r30, r24
    20de:	67 2f       	mov	r22, r23
    20e0:	71 91       	ld	r23, Z+
    20e2:	77 23       	and	r23, r23
    20e4:	e1 f7       	brne	.-8      	; 0x20de <strrev+0x4>
    20e6:	32 97       	sbiw	r30, 0x02	; 2
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <strrev+0x18>
    20ea:	7c 91       	ld	r23, X
    20ec:	6d 93       	st	X+, r22
    20ee:	70 83       	st	Z, r23
    20f0:	62 91       	ld	r22, -Z
    20f2:	ae 17       	cp	r26, r30
    20f4:	bf 07       	cpc	r27, r31
    20f6:	c8 f3       	brcs	.-14     	; 0x20ea <strrev+0x10>
    20f8:	08 95       	ret

000020fa <__udivmodhi4>:
    20fa:	aa 1b       	sub	r26, r26
    20fc:	bb 1b       	sub	r27, r27
    20fe:	51 e1       	ldi	r21, 0x11	; 17
    2100:	07 c0       	rjmp	.+14     	; 0x2110 <__udivmodhi4_ep>

00002102 <__udivmodhi4_loop>:
    2102:	aa 1f       	adc	r26, r26
    2104:	bb 1f       	adc	r27, r27
    2106:	a6 17       	cp	r26, r22
    2108:	b7 07       	cpc	r27, r23
    210a:	10 f0       	brcs	.+4      	; 0x2110 <__udivmodhi4_ep>
    210c:	a6 1b       	sub	r26, r22
    210e:	b7 0b       	sbc	r27, r23

00002110 <__udivmodhi4_ep>:
    2110:	88 1f       	adc	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	5a 95       	dec	r21
    2116:	a9 f7       	brne	.-22     	; 0x2102 <__udivmodhi4_loop>
    2118:	80 95       	com	r24
    211a:	90 95       	com	r25
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	08 95       	ret

00002122 <_exit>:
    2122:	f8 94       	cli

00002124 <__stop_program>:
    2124:	ff cf       	rjmp	.-2      	; 0x2124 <__stop_program>
